/* =============================================================================
 * File:   GeneratePageList.js
 * Author: Cole Tobin
 * =============================================================================
 * Copyright (c) 2022 Cole Tobin
 *
 * This file is part of Arch86.
 *
 * Arch86 is free software: you can redistribute it and/or modify it under the
 *   terms of the GNU Affero General Public License as published by the Free
 *   Software Foundation, either version 3 of the License, or (at your option)
 *   any later version.
 *
 * Arch86 is distributed in the hope that it will be useful, but WITHOUT ANY
 *   WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 *   FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License for
 *   more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 *   along with Arch86. If not, see <http://www.gnu.org/licenses/>.
 * =============================================================================
 */

// can't be converted to ES Module as we only want to run this in next.config.js sometimes

const dir = require("node-dir");
const fs = require("fs");
const path = require("path");

console.log("[SCRIPTS] Generating PageList.ts...");

const lines = [
    "// Auto-generated by /scripts/GeneratePageList.js",
    "// Any edits will be lost during the build process",
    "",
    "const PageList = [",
];

const list = [];

const pagesDir = path.join(process.cwd(), "pages");
dir.files(pagesDir, { sync: true }).forEach((entry) => {
    // cleanup directory separator for Windows
    entry = entry.replaceAll("\\", "/");

    if (!entry.endsWith(".tsx"))
        return;

    // get just the URL part
    entry = entry.substring(pagesDir.length);
    entry = entry.substring(0, entry.length - ".tsx".length)

    // filter out
    if (entry === "/_app" || entry === "/404")
        return;
    if (entry === "/instruction/[slug]")
        return;

    // cleanup indexes
    if (entry.endsWith("index")) {
        entry = entry.substring(0, entry.length - "/index".length);
        if (entry === "")
            entry = "/"; // webroot fix
    }

    list.push(entry);
});

const instructionsDir = path.join(process.cwd(), "data", "instructions")
dir.files(instructionsDir, { sync: true }).forEach((entry) => {
    // cleanup directory separator for Windows
    entry = entry.replaceAll("\\", "/");

    if (!entry.endsWith(".yaml"))
        return;

    // get just the URL part
    entry = entry.substring(instructionsDir.length + 1);
    entry = entry.substring(0, entry.length - ".yaml".length);

    // filter out anything not in a subdirectory
    if (!entry.includes("/"))
        return;

    // remove subdirectory
    entry = entry.substring(1);

    list.push(`/instruction${entry}`);
});

list.sort();
lines.push(...list.map((entry) => `    "${entry}",`));
lines.push(
    "];",
    "",
    "export default PageList;",
    "");

fs.writeFileSync("data/PageList.ts", lines.join("\n"));

console.log("          Done.");
