%YAML 1.2
---
wip: true
title: Call Procedure
opcode:
  - opcode: E8 \i{cw}
    mnemonic: CALL \i{rel16}
    encoding: D
    validity:
      16: valid
      32: valid
      64: n/s
    description: >-
      Call a near procedure with a relative offset stored in \i{rel16}.
  - opcode: E8 \i{cd}
    mnemonic: CALL \i{rel32}
    encoding: D
    validity:
      16: valid
      32: valid
      64: valid
    description: >-
      Call a near procedure with a relative offset stored in \i{rel32}.
  - opcode: FF /2
    mnemonic: CALL \i{r/m16}
    encoding: M
    validity:
      16: valid
      32: valid
      64: n/e
    description: >-
      Call a near procedure with an absolute address stored in \i{r/m16}.
  - opcode: FF /2
    mnemonic: CALL \i{r/m32}
    encoding: M
    validity:
      16: valid
      32: valid
      64: n/e
    description: >-
      Call a near procedure with an absolute address stored in \i{r/m32}.
  - opcode: FF /2
    mnemonic: CALL \i{r/m64}
    encoding: M
    validity:
      16: n/e
      32: n/e
      64: valid
    description: >-
      Call a near procedure with an absolute address stored in \i{r/m64}.
  - opcode: 9A \i{cww}
    mnemonic: CALL \i{ptr16:16}
    encoding: D
    validity:
      16: valid
      32: valid
      64: invalid
    description: >-
      Call a far procedure with an absolute address stored in \i{ptr16:16}.
  - opcode: 9A \i{cwd}
    mnemonic: CALL \i{ptr16:32}
    encoding: D
    validity:
      16: valid
      32: valid
      64: invalid
    description: >-
      Call a far procedure with an absolute address stored in \i{ptr16:32}.
  - opcode: FF !(11):011:bbb
    mnemonic: CALL \i{m16:16}
    encoding: M
    validity:
      16: valid
      32: valid
      64: valid
    description: >-
      Call a far procedure with an absolute indirect address stored in \i{m16:16}.

      In 32 bit mode, if the selector points to a gate, then \c{RIP} is set to the zero extended 32 bit displacement taken from the gate.
      If not, then \c{RIP} is set to the zero extended 16 bit offset from the far pointer in the instruction.
  - opcode: FF !(11):011:bbb
    mnemonic: CALL \i{m16:32}
    encoding: M
    validity:
      16: valid
      32: valid
      64: valid
    description: >-
      Call a far procedure with an absolute indirect address stored in \i{m16:32}.

      In 64 bit mode, if the selector points to a gate, then \c{RIP} is set to the 64 bit displacement taken from the gate.
      If not, then \c{RIP} is set to the zero extended 32 bit offset from the far pointer in the instruction.
  - opcode: REX.W FF !(11):011:bbb
    mnemonic: CALL \i{m16:64}
    encoding: M
    validity:
      16: n/e
      32: n/e
      64: valid
    description: >-
      Call a far procedure with an absolute indirect address stored in \i{m16:64}.

      If the selector points to a gate, then \c{RIP} is set to the 64 bit displacement taken from the gate.
      If not, then \c{RIP} is set to the 64 bit offset from the far pointer in the instruction.
opcodeNote: >-
encoding:
  operands: 1
  encodings:
    D:
      - Offset[r]
    M:
      - ModRM.r/m[r]
description: >-
  The \c{CALL} instruction saves a return address on the stack before jumping to the called procedure whose address is specified in the operand.
operation: |-
  // TODO
flags:
  CF: Affected only if a task switch occurs.
  PF: Affected only if a task switch occurs.
  AF: Affected only if a task switch occurs.
  ZF: Affected only if a task switch occurs.
  SF: Affected only if a task switch occurs.
  OF: Affected only if a task switch occurs.
exceptions:
  protected:
    "#GP(0)":
      - If the target offset in the operand is beyond the new code segment limit.
      - If the segment selector in the operand is \c{NULL}.
      - If the code segment selector in the gate is \c{NULL}.
      - If a memory operand effective address is outside the \reg{CS}, \reg{DS}, \reg{ES}, \reg{FS}, or \reg{GS} segment limit.
      - If the \reg{DS}, \reg{ES}, \reg{FS}, or \reg{GS} segment register is used to access memory and it contains a \c{NULL} segment selector.
      - If the target mode is compatibility mode and \c{SSP} is not in the low 4\nbsp{}GiB.
      - If \c{SSP} in \reg{IA32_PLi_SSP} (where \c{i} is the new \c{CPL}) is not 8 byte aligned.
      - If "supervisor shadow stack" token on the new shadow stack is marked busy.
      - If the destination mode is protected or compatibility mode, but \c{SSP} in "supervisor shadow stack" token is beyond 4\nbsp{}GiB.
      - If \c{SSP} in "supervisor shadow stack" token does not match \c{SSP} address in \reg{IA32_PLi_SSP} (where \c{i} is the new \c{CPL}).
    "#GP(selector)":
      - If a code segment or gate or \c{TSS} selector index is outside descriptor table limits.
      - If the segment descriptor pointed to by the segment selector in the destination operand is not for a conforming-code segment, nonconforming-code segment, call gate, task gate, or task state segment.
      - If the \c{DPL} for a nonconforming-code segment is not equal to the \c{CPL} or the \c{RPL} for the segment's segment selector is greater than the \c{CPL}.
      - If the \c{DPL} for a conforming-code segment is greater than the \c{CPL}.
      - If the \c{DPL} from a call-gate, task-gate, or \c{TSS} segment descriptor is less than the \c{CPL} or than the \c{RPL} of the call-gate, task-gate, or \c{TSS}'s segment selector.
      - If the segment descriptor for a segment selector from a call gate does not indicate it is a code segment.
      - If the segment selector from a call gate is beyond the descriptor table limits.
      - If the \c{DPL} for a code-segment obtained from a call gate is greater than the \c{CPL}.
      - If the segment selector for a \c{TSS} has its local/global bit set for local.
      - If a \c{TSS} segment descriptor specifies that the \c{TSS} is busy or not available.
    "#SS(0)":
      - If pushing the return address, parameters, or stack segment pointer onto the stack exceeds the bounds of the stack segment (if no stack switch occurs).
      - If a memory operand effective address is outside the \reg{SS} segment limit.
    "#SS(selector)":
      - If pushing the return address, parameters, or stack segment pointer onto the stack exceeds the bounds of the stack segment (when a stack switch occurs).
      - If the \reg{SS} segment register is being loaded as part of a stack switch and the segment pointed to is marked not present.
    "#NP(selector)":
      - If a code segment, data segment, call gate, task gate, or \c{TSS} is not present.
    "#TS(selector)":
      - If the new stack segment selector and \reg{ESP} are beyond the end of the \c{TSS}.
      - If the new stack segment selector is \c{NULL}.
      - If the \c{RPL} of the new stack segment selector in the \c{TSS} is not equal to the \c{DPL} of the code segment being accessed.
      - If the new stack segment is not a writable data segment.
      - If the segment-selector index for a stack segment is outside the descriptor table limits.
    "#PF(fault-code)":
      - If a page fault occurs.
    "#AC(0)":
      - If alignment checking is enabled and an unaligned memory reference is made while the current privilege level is 3.
    "#UD":
      - If the \instr{LOCK} prefix is used.
  real:
    "#GP": If a memory effective address is outside the \reg{CS}, \reg{DS}, \reg{ES}, \reg{FS}, or \reg{GS} segment limit.
    "#UD": If the \instr{LOCK} prefix is used.
  virtual:
    "#GP(0)": If a memory effective address is outside the \reg{CS}, \reg{DS}, \reg{ES}, \reg{FS}, or \reg{GS} segment limit.
    "#PF(fault-code)": If a page fault occurs.
    "#AC(0)": If alignment checking is enabled and an unaligned memory reference is made while the current privilege level is 3.
    "#UD": If the \instr{LOCK} prefix is used.
  compatibility:
    "#GP(0)":
      - If the target offset in the operand is beyond the new code segment limit.
      - If the segment selector in the operand is \c{NULL}.
      - If the code segment selector in the gate is \c{NULL}.
      - If a memory operand effective address is outside the \reg{CS}, \reg{DS}, \reg{ES}, \reg{FS}, or \reg{GS} segment limit.
      - If the \reg{DS}, \reg{ES}, \reg{FS}, or \reg{GS} segment register is used to access memory and it contains a \c{NULL} segment selector.
      - If the target mode is compatibility mode and \c{SSP} is not in the low 4\nbsp{}GiB.
      - If \c{SSP} in \reg{IA32_PLi_SSP} (where \c{i} is the new \c{CPL}) is not 8 byte aligned.
      - If "supervisor shadow stack" token on the new shadow stack is marked busy.
      - If the destination mode is protected or compatibility mode, but \c{SSP} in "supervisor shadow stack" token is beyond 4\nbsp{}GiB.
      - If \c{SSP} in "supervisor shadow stack" token does not match \c{SSP} address in \reg{IA32_PLi_SSP} (where \c{i} is the new \c{CPL}).
      - If the target offset in the operand is in non-canonical form.
    "#GP(selector)":
      - If a code segment or gate or \c{TSS} selector index is outside descriptor table limits.
      - If the segment descriptor pointed to by the segment selector in the destination operand is not for a conforming-code segment, nonconforming-code segment, call gate, task gate, or task state segment.
      - If the \c{DPL} for a nonconforming-code segment is not equal to the \c{CPL} or the \c{RPL} for the segment's segment selector is greater than the \c{CPL}.
      - If the \c{DPL} for a conforming-code segment is greater than the \c{CPL}.
      - If the \c{DPL} from a call-gate, task-gate, or \c{TSS} segment descriptor is less than the \c{CPL} or than the \c{RPL} of the call-gate, task-gate, or \c{TSS}'s segment selector.
      - If the segment descriptor for a segment selector from a call gate does not indicate it is a code segment.
      - If the segment selector from a call gate is beyond the descriptor table limits.
      - If the \c{DPL} for a code-segment obtained from a call gate is greater than the \c{CPL}.
      - If the segment selector for a \c{TSS} has its local/global bit set for local.
      - If a \c{TSS} segment descriptor specifies that the \c{TSS} is busy or not available.
      - If a memory addressed accessed by the selector is is non-canonical form.
    "#SS(0)":
      - If pushing the return address, parameters, or stack segment pointer onto the stack exceeds the bounds of the stack segment (if no stack switch occurs).
      - If a memory operand effective address is outside the \reg{SS} segment limit.
    "#SS(selector)":
      - If pushing the return address, parameters, or stack segment pointer onto the stack exceeds the bounds of the stack segment (when a stack switch occurs).
      - If the \reg{SS} segment register is being loaded as part of a stack switch and the segment pointed to is marked not present.
    "#NP(selector)":
      - If a code segment, data segment, call gate, task gate, or \c{TSS} is not present.
    "#TS(selector)":
      - If the new stack segment selector and \reg{ESP} are beyond the end of the \c{TSS}.
      - If the new stack segment selector is \c{NULL}.
      - If the \c{RPL} of the new stack segment selector in the \c{TSS} is not equal to the \c{DPL} of the code segment being accessed.
      - If the new stack segment is not a writable data segment.
      - If the segment-selector index for a stack segment is outside the descriptor table limits.
    "#PF(fault-code)":
      - If a page fault occurs.
    "#AC(0)":
      - If alignment checking is enabled and an unaligned memory reference is made while the current privilege level is 3.
    "#UD":
      - If the \instr{LOCK} prefix is used.
  long: TODO
