const pdpfp = "Packed Double-Precision Floating-Point Values";
const pspfp = "Packed Single-Precision Floating-Point Values";
const sdpfp = "Scalar Double-Precision Floating-Point Value";
const sspfp = "Scalar Single-Precision Floating-Point Value";

const pdwi = "Packed Doubleword Integers";
const dwi = /* Scalar */ "Doubleword Integer";

const InstructionTitles: Record<string, string> = {
    aaa: `ASCII Adjust \\reg{AL} After Addition`,
    aad: `ASCII Adjust \\reg{AX} Before Division`,
    aam: `ASCII Adjust \\reg{AX} After Multiplication`,
    aas: `ASCII Adjust \\reg{AL} After Subtraction`,
    adc: `Add With Carry`,
    adcx: `Unsigned Integer Addition of Two Operands with Carry Flag`,
    add: `Add`,
    addList: `Add (Vector)`,
    addpd: `Add ${pdpfp}`,
    addps: `Add ${pspfp}`,
    addsd: `Add ${sdpfp}`,
    addss: `Add ${sspfp}`,
    addsubList: `Add/Subtract (Vector)`,
    addsubpd: `Add/Subtract ${pdpfp}`,
    addsubps: `Add/Subtract ${pspfp}`,
    adox: `Unsigned Integer Addition of Two Operands with Overflow Flag`,
    aesdecList: `Perform AES Decryption`,
    aesdec: `Perform One Round of AES Decryption`,
    aesdec128kl: `Perform Ten Rounds of AES Decryption With Key Locker`,
    aesdec256kl: `Perform 14 Rounds of AES Decryption With Key Locker`,
    aesdeclast: `Perform Last Round of AES Decryption`,
    aesdecwide128kl: `Perform Ten Rounds of AES Decryption With Key Locker on Eight Blocks`,
    aesdecwide256kl: `Perform 14 Rounds of AES Decryption With Key Locker on Eight Blocks`,
    aesencList: `Perform AES Encryption`,
    aesenc: `Perform One Round of AES Encryption`,
    aesenc128kl: `Perform Ten Rounds of AES Encryption With Key Locker`,
    aesenc256kl: `Perform 14 Rounds of AES Encryption With Key Locker`,
    aesenclast: `Perform Last Round of AES Encryption`,
    aesencwide128kl: `Perform Ten Rounds of AES Encryption With Key Locker on Eight Blocks`,
    aesencwide256kl: `Perform 14 Rounds of AES Encryption With Key Locker on Eight Blocks`,
    aesimc: `Perform the AES "Inverse Mix Columns" Transformation`,
    aeskeygenassist: `AES Round Key Generation Assist`,
    and: `Logical AND`,
    andList: `Logical AND (Vector)`,
    andpd: `Logical AND ${pdpfp}`,
    andps: `Logical AND ${pspfp}`,
    andn: `Logical AND NOT`,
    andnList: `Logical AND NOT (Vector)`,
    andnpd: `Logical AND NOT ${pdpfp}`,
    andnps: `Logical AND NOT ${pspfp}`,
    arpl: `Adjust \\c{RPL} Field of Segment Selector`,

    bextr: `Bit Extract Field`,
    blendList: `Blend (Vector)`,
    blendpd: `Blend ${pdpfp}`,
    blendps: `Blend ${pspfp}`,
    blendvList: `Variable Blend (Vector)`,
    blendvpd: `Variable Blend ${pdpfp}`,
    blendvps: `Variable Blend ${pspfp}`,
    blsi: `Extract Lowest Set Bit`,
    blsmsk: `Get Mask Up to Lowest Set Bit`,
    blsr: `Clear Lowest Set Bit`,
    bndcl: `Check Lower Bound`,
    bndcuList: `Check Upper Bound`,
    bndcn: `Check Upper Bound`,
    bndcu: `Check Upper Bound (Inverted)`,
    bndldx: `Load Extended Bounds Using Address Translation`,
    bndmk: `Make Bounds`,
    bndmov: `Move Bounds`,
    bndstx: `Store Extended Bounds Using Address Translation`,
    bound: `Check Array Index Against Bounds`,
    bsf: `Bit Scan Forward`,
    bsr: `Bit Scan Reverse`,
    bswap: `Byte Swap`,
    bt: `Bit Test`,
    btc: `Bit Test and Complement`,
    btr: `Bit Test and Reset`,
    bts: `Bit Test and Set`,
    bzhi: `Zero High Bits From Index`,

    call: `Call Procedure`,
    cbw: `Convert Byte to Word`,
    cwde: `Convert Word to Doubleword`,
    cdqe: `Convert Doubleword to Quadword`,
    clac: `Clear Alignment Check Flag`,
    clc: `Clear Carry Flag`,
    cld: `Clear Direction Flag`,
    cldemote: `Demote Cache Line`,
    clflush: `Flush Cache Line`,
    clflushopt: `Flush Cache Line (Optimized)`,
    cli: `Clear Interrupt Flag`,
    clrssbsy: `Clear Busy Flag in a Supervisor Shadow Stack Token`,
    clts: `Clear Task-Switched Flag in \\reg{CR0}`,
    clwb: `Write Back Cache Line`,
    cmc: `Complement Carry Flag`,
    cmovcc: `Conditional Move`,
    cmp: `Compare`,
    cmpList: `Compare (Vector)`,
    cmppd: `Compare ${pdpfp}`,
    cmpps: `Compare ${pspfp}`,
    cmpsd: `Compare ${sdpfp}`,
    cmpss: `Compare ${sspfp}`,
    cmps: `Compare Strings`,
    cmpxchg: `Compare and Exchange`,
    cmpxchg8b: `Compare and Exchange 8 Bytes`,
    cmpxchg16b: `Compare and Exchange 16 Bytes`,
    comiList: `Compare Ordered`,
    comisd: `Compare Ordered ${sdpfp} and Set \\reg{EFLAGS}`,
    comiss: `Compare Ordered ${sspfp} and Set \\reg{EFLAGS}`,
    cpuid: `CPU Identification`,
    crc32: `Accumulate CRC32 Value`,
    cvtdqList: `Convert ${pdwi} (Vector)`,
    cvtdq2pd: `Convert ${pdwi} to ${pdpfp}`,
    cvtdq2ps: `Convert ${pdwi} to ${pspfp}`,
    cvtpdList: `Convert ${pdpfp} (Vector)`,
    cvtpd2dq: `Convert ${pdpfp} to ${pdwi}`,
    cvtpd2di: `Convert ${pdpfp} to ${pdwi} (MMX)`,
    cvtpd2ps: `Convert ${pdpfp} to ${pspfp}`,
    cvtpiList: `Convert ${pdwi} (Vector/MMX)`,
    cvtpi2pd: `Convert ${pdwi} to ${pdpfp} (MMX)`,
    cvtpi2ps: `Convert ${pdwi} to ${pspfp} (MMX)`,
    cvtpsList: `Convert ${pspfp} (Vector)`,
    cvtps2dq: `Convert ${pspfp} to ${pdwi}`,
    cvtps2pd: `Convert ${pspfp} to ${pdpfp}`,
    cvtps2pi: `Convert ${pspfp} ${pdwi} (MMX)`,
    cvtsdList: `Convert ${sdpfp} (Vector)`,
    cvtsd2si: `Convert ${sdpfp} to ${dwi}`,
    cvtsd2ss: `Convert ${sdpfp} to ${sspfp}`,
    cvtsiList: `Convert ${dwi} (Vector)`,
    cvtsi2sd: `Convert ${dwi} to ${sdpfp}`,
    cvtsi2ss: `Convert ${dwi} to ${sspfp}`,
    cvtssList: `Convert ${sspfp} (Vector)`,
    cvtss2sd: `Convert ${sspfp} to ${sdpfp}`,
    cvtss2si: `Convert ${sspfp} to ${dwi}`,
    cvttpdList: `Convert with Truncation ${pdpfp} (Vector)`,
    cvttpd2dq: `Convert with Truncation ${pdpfp} to ${pdwi}`,
    cvttpd2pi: `Convert with Truncation ${pdpfp} to ${pdwi} (MMX)`,
    cvttpsList: `Convert with Truncation ${pspfp} (Vector)`,
    cvttps2dq: `Convert with Truncation ${pspfp} to ${pdwi}`,
    cvttps2pi: `Convert with Truncation ${pspfp} to ${pdwi} (MMX)`,
    //cvttsdList: `Convert with Truncation ${sdpfp} (Vector)`,
    cvttsd2si: `Convert with Truncation ${sdpfp} to ${dwi}`,
    // cvttssList: `Convert with Truncation ${sspfp} (Vector)`,
    cvttss2si: `Convert with Truncation ${sspfp} to ${dwi}`,
    cwd: `Convert Word to Doubleword Through DX`,
    cdq: `Convert Doubleword to Quadword Through EDX`,
    cqo: `Convert Quadword to Octoword Through RDX`,

    daa: `Decimal Adjust \\reg{AL} After Addition`,
    das: `Decimal Adjust \\reg{AL} After Subtraction`,
    dec: `Decrement by One`,
    div: `Unsigned Divide`,
    divList: `Divide (Vector)`,
    divpd: `Divide ${pdpfp}`,
    divps: `Divide ${pspfp}`,
    divsd: `Divide ${sdpfp}`,
    divss: `Divide ${sspfp}`,
    dpList: `Dot Product (Vector)`,
    dppd: `Dot Product of ${pdpfp}`,
    dpps: `Dot Product of ${pspfp}`,

    emms: `Empty MMX Technology State`,
    encodekey128: `Encode 128 bit Key with Key Locker`,
    encodekey256: `Encode 256 bit Key with Key Locker`,
    endbr32: `Terminate an Indirect Branch in 32 bit Mode`,
    endbr64: `Terminate an Indirect Branch in 64 bit Mode`,
    enter: `Make Stack Frame for Procedure Parameters`,
    extractps: `Extract ${pspfp}`,
};

export default InstructionTitles;
