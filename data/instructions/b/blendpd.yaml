%YAML 1.2
---
title: Blend Packed Double-Precision Floating-Point Values
opcode:
  - opcode: 66 0F 3A 0D /r \i{ib}
    mnemonic: BLENDPD \i{xmm1}, \i{xmm2/m128}, \i{imm8}
    encoding: LEGACY
    validity:
      16: invalid
      32: valid
      64: valid
    cpuid: SSE4_1
    description: >-
      Selects packed double-precision floating-point values from \i{xmm1} and \i{xmm2/m128} from a mask specified in \i{imm8}.
      Stores the result in \i{xmm1}.
  - opcode: VEX.128.66.0F3A.WIG 0D /r \i{ib}
    mnemonic: VBLENDPD \i{xmm1}, \i{xmm2}, \i{xmm3/m128}, \i{imm8}
    encoding: VEX
    validity:
      16: invalid
      32: valid
      64: valid
    cpuid: AVX
    description: >-
      Selects packed double-precision floating-point values from \i{xmm2} and \i{xmm3/m128} from a mask specified in \i{imm8}.
      Stores the result in \i{xmm1}.
  - opcode: VEX.256.66.0F3A.WIG 0D /r \i{ib}
    mnemonic: VBLENDPD \i{ymm1}, \i{ymm2}, \i{ymm3/m256}, \i{imm8}
    encoding: VEX
    validity:
      16: invalid
      32: valid
      64: valid
    cpuid: AVX
    description: >-
      Selects packed double-precision floating-point values from \i{ymm2} and \i{ymm3/m256} from a mask specified in \i{imm8}.
      Stores the result in \i{ymm1}.
encoding:
  operands: 4
  encodings:
    LEGACY:
      - ModRM.reg[rw]
      - ModRM.r/m[r]
      - imm8[1:0]
      - ""
    VEX:
      - ModRM.reg[w]
      - VEX.vvvv[r]
      - ModRM.r/m[r]
      - imm8[3:0]
description: >-
  The \c{(V)BLENDPD} instruction conditionally moves double-precision floating-point values from the second source operand into the first source operand.
  The result is stored in the destination operand.

  This instruction, despite being named as if it operates on floating-point numbers, will work on 64 bit integers as well.

  \canned{zeroUpperSimd}
operation: |-
  public void BLENDPD(SimdF64 dest, SimdF64 src, byte mask)
  {
    // If `mask[n]` is 0, `dest` will be copied into itself (i.e. nothing will happen)
    if (mask[0])
      dest[0] = src[0];
    if (mask[1])
      dest[1] = src[1];
    // dest[2..SimdF64.MAX] (unmodified)
  }

  void VBLENDPD_Vex(SimdF64 dest, SimdF64 src1, SimdF64 src2, byte mask, int kl)
  {
    for (int n = 0; n < kl, n++) {
      if (mask[n])
        dest[n] = src2[n];
      else
        dest[n] = src1[n];
    }
    dest[kl..SimdF64.MAX] = 0;
  }
  public void VBLENDPD_Vex128(SimdF64 dest, SimdF64 src1, SimdF64 src2, byte mask)
  {
    VBLENDPD_Vex(dest, src1, src2, mask, 2);
  }
  public void VBLENDPD_Vex256(SimdF64 dest, SimdF64 src1, SimdF64 src2, byte mask)
  {
    VBLENDPD_Vex(dest, src1, src2, mask, 4);
  }
intrinsics: |-
  __m128d _mm_blend_pd(__m128d v1, __m128d v2, const uint32_t mask)

  __m256d _mm256_blend_pd(__m256d a, __m256d b, const uint32_t mask)
exceptions:
  floating: None
  other: \exceptionVex{4}
