%YAML 1.2
---
title: Byte Swap
opcode:
  - opcode: 0F C8+rd
    mnemonic: BSWAP \i{r32}
    encoding: O
    validity:
      16: valid
      32: valid*
      64: valid
    description: Reverses the byte order (endianness) of \i{r32}.
  - opcode: REX.W 0F C8+rd
    mnemonic: BSWAP \i{r64}
    encoding: O
    validity:
      16: n/e
      32: n/e
      64: valid
    description: Reverses the byte order (endianness) of \i{r64}.
opcodeNote: >-
  The \c{BSWAP} instruction is not supported on processors earlier than the 80486.
encoding:
  operands: 1
  encodings:
    O:
      - opcode[rw]
description: >-
  The \c{BSWAP} instruction reverses the byte order of the operand.
  This instruction can be used to change the endianness of the operand from little to big (or visa versa).

  This instruction is only valid on 32 and 64 bit operands.
  To operate on a 16 bit operand, use the \instr{XCHG} instruction.
  Use of this instruction on a 16 bit operand is undefined.
operation: |-
  public void BSWAP_32(ref uint arg)
  {
    uint temp = arg;
    arg.Bit[0..8] = temp.Bit[24..32];
    arg.Bit[8..16] = temp.Bit[16..24];
    arg.Bit[16..24] = temp.Bit[8..16];
    arg.Bit[24..32] = temp.Bit[0..8];
  }

  public void BSWAP_64(ref ulong arg)
  {
    ulong temp = arg;
    arg.Bit[0..8] = temp.Bit[56..64];
    arg.Bit[8..16] = temp.Bit[48..56];
    arg.Bit[16..24] = temp.Bit[40..48];
    arg.Bit[24..32] = temp.Bit[32..40];
    arg.Bit[32..40] = temp.Bit[24..32];
    arg.Bit[40..48] = temp.Bit[16..24];
    arg.Bit[48..56] = temp.Bit[8..16];
    arg.Bit[56..64] = temp.Bit[0..8];
  }
exceptions:
  real:
    "#UD": \exception{lock}
  virtual:
    "#UD": \exception{lock}
  protected:
    "#UD": \exception{lock}
  compatibility:
    "#UD": \exception{lock}
  long:
    "#UD": \exception{lock}
