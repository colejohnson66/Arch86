%YAML 1.2
---
title: Check Array Index Against Bounds
opcode:
  - opcode: 62 11:rrr:bbb
    mnemonic: BOUND \i{r16}, \i{m16&16}
    encoding: RM
    validity:
      16: valid
      32: valid
      64: n/e
    description: >-
      Checks if \i{r16} (an array index) is within the bounds specified by \i{m16&16}.
  - opcode: 62 11:rrr:bbb
    mnemonic: BOUND \i{r32}, \i{m32&32}
    encoding: RM
    validity:
      16: valid
      32: valid
      64: n/e
    description: >-
      Checks if \i{r32} (an array index) is within the bounds specified by \i{m32&32}.
encoding:
  operands: 2
  encodings:
    RM:
      - ModRM.reg[r]
      - ModRM.r/m[r]
description: >-
  The \c{BOUND} instruction determines if the first operand (an array index) is within the bounds of an array specified in the second operand.
  The array index is a signed integer located in a register, and the bounds are a memory location containing either two consecutive words (in 16 bit mode) or two consecutive double words (in 32 bit mode).
  From these two memory values, the first is the lower bound of the array and the second is the upper bound of the array.

  If the index is within the bounds specified, this instruction executes with no side effects.
  If, however, the index is \i{not} within the bounds, a \c{#BR} exception is raised.

  This instruction is not encodable in 64 bit mode, and if encountered, will be interpreted as an EVEX prefix.
operation: |-
  public void BOUND_16(ushort index, IntPtr bounds)
  {
    if (index < mem16[bounds] || index > mem16[bounds + 2])
      #BR;
  }

  public void BOUND_32(uint index, IntPtr bounds)
  {
    if (index < mem32[bounds] || index > mem32[bounds + 2])
      #BR;
  }
exceptions:
  protected:
    "#BR": If the bounds test fails.
    "#UD":
      - \exception{lock}
    "#GP(0)":
      - If the destination's effective address of the Bound Table entry is outside the \reg{DS} segment limit.
      - If the \reg{DS} segment contains a \c{NULL} segment selector.
    "#SS(0)": \exception{segLimitSS}
    "#PF(fc)": \exception{pf}
    "#AC(0)": \exception{ac}
  real:
    "#BR": If the bounds test fails.
    "#UD":
      - If the \instr{LOCK} prefix is used.
      - If the second operand is not a memory location.
    "#GP(0)":
      - If the destination's effective address of the Bound Table entry is outside the \reg{DS} segment limit.
      - If the \reg{DS} segment contains a \c{NULL} segment selector.
    "#SS(0)": \exception{segLimitSS}
  virtual: Same exceptions as protected mode.
  compatibility: Same exceptions as protected mode.
  long: Not encodable.
changes:
  version: 75
  date: 2021-06
  list:
    - The overview table lists the encodings as "invalid" in 64 bit mode, but they are actually not encodable due to the EVEX prefix.
    - The encoding of the ModR/M byte has been changed from \c{/r} to show the restrictions on it.
