%YAML 1.2
---
title: Make Bounds
opcode:
  - opcode: F3 0F 1B !(11):rrr:bbb
    mnemonic: BNDMK \i{bnd}, \i{m32}
    encoding: RM
    validity:
      16: valid
      32: valid
      64: n/e
    cpuid: MPX
    description: >-
      Makes lower and upper bounds from \i{m32} and stores them into \i{bnd}.
  - opcode: F3 0F 1B !(11):rrr:bbb
    mnemonic: BNDMK \i{bnd}, \i{m64}
    encoding: RM
    validity:
      16: n/e
      32: n/e
      64: valid
    cpuid: MPX
    description: >-
      Makes lower and upper bounds from \i{m64} and stores them into \i{bnd}.
encoding:
  operands: 2
  encodings:
    RM:
      - ModRM.reg[w]
      - ModRM.r/m[r]
description: >-
  The \c{BNDMK} instruction creates lower and upper bounds from the source operand and stores them into the bounds register in the destination operand.

  The lower bound is taken from the value contained in the register pointed to by the \c{base} field of the SIB byte.
  The upper bound is created by computing the effective address (see \instr{LEA}) of the referenced memory.
  At no time is memory accessed, and the flags are untouched.
operation: |-
  public void BNDMK(Bound dest, Sib addr)
  {
    dest.lower = addr.base;
    dest.upper = ~lea(addr);
  }
intrinsics: |-
  void *_bnd_set_ptr_bounds(const void *address, size_t size)
exceptions:
  protected:
    "#UD":
      - \exception{lock}
      - If \cpuid{eax=07,ecx=00,,ebx=14=mpx} is \c{0}.
      - If \c{ModRM.reg} does not encode \c{BND0} through \c{BND3} (i.e. contains a 4 or higher).
      - If 16 bit addressing is used.
  real: Same exceptions as protected mode.
  virtual: Same exceptions as protected mode.
  compatibility: Same exceptions as protected mode.
  long:
    "#UD":
      - \exception{lock}
      - If \cpuid{eax=07,ecx=00,,ebx=14=mpx} is \c{0}.
      - If \c{ModRM.reg} does not encode \c{BND0} through \c{BND3} (i.e. contains a 4 or higher).
      - If 16 bit addressing is used.
      - If RIP-relative addressing is used.
    "#SS(0)": \exception{nonCanonSS}
    "#GP(0)": \exception{nonCanon}
changes:
  version: 75
  date: 2021-06
  list:
    - The encoding of the ModR/M byte has been changed from \c{/r} to show the restrictions on it.
