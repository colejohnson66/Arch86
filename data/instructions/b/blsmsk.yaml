%YAML 1.2
---
title: Get Mask Up to Lowest Set Bit
opcode:
  - opcode: VEX.LZ.0F38.W0 F3 /2
    mnemonic: BLSMSK \i{r32}, \i{r/m32}
    encoding: VEX
    validity:
      16: invalid
      32: valid
      64: valid
    cpuid: BMI1
    description: >-
      Sets the lowest bits in \i{r32} from position 0 up to (and including) the lowest set bit of \i{r/m32}.
      All upper bits in \i{r32} are cleared.
  - opcode: VEX.LZ.0F38.W1 F3 /2
    mnemonic: BLSMSK \i{r64}, \i{r/m64}
    encoding: VEX
    validity:
      16: invalid
      32: valid
      64: invalid
    cpuid: BMI1
    description: >-
      Sets the lowest bits in \i{r64} from position 0 up to (and including) the lowest set bit of \i{r/m64}.
      All upper bits in \i{r64} are cleared.
encoding:
  operands: 2
  encodings:
    VEX:
      - VEX.vvvv[w]
      - ModRM.r/m[r]
description: >-
  The \c{BLSMSK} instruction sets all the bits in the destination operand from position 0 up to (and including) the lowest set bit of the source operand.
  All other bits in the destination operand are zeroed.

  The \reg{CF} flag is set if the source is not zero.

  \canned{vexWIgnoredIn32}

  \canned{vexLMustBe0}
operation: |-
  public void BLSMSK_32(ref uint dest, uint src)
  {
    dest = src ^ (src - 1);
    CF = (src != 0);
  }

  public void BLSMSK_64(ref ulong dest, ulong src)
  {
    dest = src ^ (src - 1);
    CF = (src != 0);
  }
flags:
  CF: Set if the source is not zero. Cleared otherwise.
  PF: Undefined.
  AF: Undefined.
  ZF: Cleared.
  SF: Set according to the result.
  OF: Cleared.
intrinsics: |-
  uint32_t _blsmsk_u32(uint32_t src)
  uint64_t _blsmsk_u64(uint64_t src)
exceptions:
  floating: None
  other: \exceptionVex{13}
changes:
  version: 76
  date: 2021-12
  list:
    - >-
      The \c{BLSMSK r64, r/m64} form is documented as being "not encodable" in 32 bit mode.
