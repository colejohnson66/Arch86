%YAML 1.2
---
title: Bit Extract Field
opcode:
  - opcode: VEX.LZ.0F38.W0 F7 /r
    mnemonic: BEXTR \i{r32a}, \i{r/m32}, \i{r32b}
    encoding: RMV
    validity:
      16: invalid
      32: valid
      64: valid
    cpuid: BMI1
    description: >-
      Contiguous bitwise extraction from \i{r/m32} using \i{r32b} as a control.
      Stores the result in \i{r32a}.
  - opcode: VEX.LZ.0F38.W1 F7 /r
    mnemonic: BEXTR \i{r64a}, \i{r/m64}, \i{r64b}
    encoding: RMV
    validity:
      16: invalid
      32: invalid
      64: valid
    cpuid: BMI1
    description: >-
      Contiguous bitwise extraction from \i{r/m64} using \i{r64b} as a control.
      Stores the result in \i{r64a}.
encoding:
  operands: 3
  encodings:
    RMV:
      - ModRM.reg[w]
      - ModRM.r/m[r]
      - VEX.vvvv[r]
description: >-
  The \c{BEXTR} instruction extracts contiguous bits from the first source operand using using index and length values provided in the second source operand.
  The result is stored in the destination operand.

  The control register contains 16 bits: the lower eight are the starting index into the slice, and the upper eight is the amount of bits to extract.
  In other words, the destination register will be filled least significant to most significant by copying from the source, beginning at the starting position (where 0 indicates the least significant bit).
  The length field determines how many bits are extracted.

  \canned{vexWIgnoredIn32}

  \canned{vexLMustBe0}
operation: |-
  public void BEXTR_32(ref uint dest, uint src1, uint src2)
  {
    uint start = src2[0..8];
    uint len = src2[8..16];
    uint end = start + len;
    dest = src1[start..end];
  }

  public void BEXTR_64(ref ulong dest, ulong src1, ulong src2)
  {
    ulong start = src2[0..8];
    ulong len = src2[8..16];
    ulong end = start + len;
    dest = src1[start..end]
  }
flags:
  CF: Cleared.
  PF: Undefined.
  AF: Undefined.
  ZF: Set according to the result.
  SF: Undefined.
  OF: Cleared.
intrinsics: |-
  uint32_t _bextr_u32(uint32_t src, uint32_t start, uint32_t len)
  uint64_t _bextr_u64(uint64_t src, uint32_t start, uint32_t len)
exceptions:
  floating: None
  other: \exceptionVex{13}
  otherAdditional:
    "#UD": \exception{vex.l0}
changes:
  version: 76
  date: 2021-12
  list:
    - >-
      The "Exceptions" section lists the \c{#UD} as occurring when \c{VEX.W = 1}.
    - >-
      The \c{BEXTR r64a, r/m64, r64b} form is documented as being "not encodable" in 32 bit mode.
