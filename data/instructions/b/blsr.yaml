%YAML 1.2
---
title: Clear Lowest Set Bit
opcode:
  - opcode: VEX.LZ.0F38.W0 F3 /1
    mnemonic: BLSMSK \i{r32}, \i{r/m32}
    encoding: VEX
    validity:
      16: invalid
      32: valid
      64: valid
    cpuid: BMI1
    description: >-
      Clears the lowest set bit from \i{r/m32}, and writes the result into \i{r32}.
  - opcode: VEX.LZ.0F38.W1 F3 /1
    mnemonic: BLSMSK \i{r64}, \i{r/m64}
    encoding: VEX
    validity:
      16: invalid
      32: valid
      64: invalid
    cpuid: BMI1
    description: >-
      Clears the lowest set bit from \i{r/m64}, and writes the result into \i{r64}.
encoding:
  operands: 2
  encodings:
    VEX:
      - VEX.vvvv[w]
      - ModRM.r/m[r]
description: >-
  The \c{BLSMSK} instruction clears the lowest set bit of the source operand and writes the result to the destination operand.
  All other bits in the source operand are untouched.

  The \reg{CF} flag is set if the source is not zero.

  \canned{vexWIgnoredIn32}

  \canned{vexLMustBe0}
operation: |-
  public void BLSR_32(ref uint dest, uint src)
  {
    dest = src & (src - 1);
    CF = (src != 0);
  }

  public void BLSR_64(ref ulong dest, ulong src)
  {
    dest = src & (src - 1);
    CF = (src != 0);
  }
flags:
  CF: Set if the source is not zero. Cleared otherwise.
  PF: Undefined.
  AF: Undefined.
  ZF: Set according to the result.
  SF: Set according to the result.
  OF: Cleared.
intrinsics: |-
  uint32_t _blsr_u32(uint32_t src)
  uint64_t _blsr_u64(uint64_t src)
exceptions:
  floating: None
  other: \exceptionVex{13}
changes:
  version: 75
  date: 2021-06
  list:
    - >-
      Officially, this instruction is titled "Reset Lowest Set Bit".
      This is changed here for consistency (clearing a bit sets it to 0).
    - >-
      The \c{BLSR r64, r/m64} form is documented as being "not encodable" in 32 bit mode.
      This is misleading as it \i{is} encodable, but is defined to be treated as the 32 bit form.
