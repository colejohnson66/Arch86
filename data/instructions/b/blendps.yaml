%YAML 1.2
---
title: Blend Packed Single-Precision Floating-Point Values
opcode:
  - opcode: 66 0F 3A 0C /r \i{ib}
    mnemonic: BLENDPS \i{xmm1}, \i{xmm2/m128}, \i{imm8}
    encoding: LEGACY
    validity:
      16: invalid
      32: valid
      64: valid
    cpuid: SSE4_1
    description: >-
      Selects packed single-precision floating-point values from \i{xmm1} and \i{xmm2/m128} from a mask specified in \i{imm8}.
      Stores the result in \i{xmm1}.
  - opcode: VEX.128.66.0F3A.WIG 0C /r \i{ib}
    mnemonic: VBLENDPS \i{xmm1}, \i{xmm2}, \i{xmm3/m128}, \i{imm8}
    encoding: VEX
    validity:
      16: invalid
      32: valid
      64: valid
    cpuid: AVX
    description: >-
      Selects packed single-precision floating-point values from \i{xmm2} and \i{xmm3/m128} from a mask specified in \i{imm8}.
      Stores the result in \i{xmm1}.
  - opcode: VEX.256.66.0F3A.WIG 0C /r \i{ib}
    mnemonic: VBLENDPS \i{ymm1}, \i{ymm2}, \i{ymm3/m256}, \i{imm8}
    encoding: VEX
    validity:
      16: invalid
      32: valid
      64: valid
    cpuid: AVX
    description: >-
      Selects packed single-precision floating-point values from \i{ymm2} and \i{ymm3/m256} from a mask specified in \i{imm8}.
      Stores the result in \i{ymm1}.
encoding:
  operands: 4
  encodings:
    LEGACY:
      - ModRM.reg[rw]
      - ModRM.r/m[r]
      - imm8[3:0]
      - ""
    VEX:
      - ModRM.reg[w]
      - VEX.vvvv[r]
      - ModRM.r/m[r]
      - imm8
description: >-
  The \c{(V)BLENDPS} instruction conditionally moves single-precision floating-point values from the second source operand into the first source operand.
  The result is stored in the destination operand.

  This instruction, despite being named as if it operates on floating-point numbers, will work on 32 bit integers as well.

  \canned{zeroUpperSimd}
operation: |-
  public void BLENDPS(SimdF32 dest, SimdF32 src, byte mask)
  {
    // If `mask[n]` is 0, `dest` will be copied into itself (i.e. nothing will happen)
    if (mask[0])
      dest[0] = src[0];
    if (mask[1])
      dest[1] = src[1];
    if (mask[2])
      dest[2] = src[2];
    if (mask[3])
      dest[3] = src[3];
    // dest[4..SimdF32.MAX] (unmodified)
  }

  void VBLENDPS_Vex(SimdF32 dest, SimdF32 src1, SimdF32 src2, byte mask, int kl)
  {
    for (int n = 0; n < kl, n++) {
      if (mask[n])
        dest[n] = src2[n];
      else
        dest[n] = src1[n];
    }
    dest[kl..SimdF32.MAX] = 0;
  }
  public void VBLENDPS_Vex128(SimdF32 dest, SimdF32 src1, SimdF32 src2, byte mask)
  {
    VBLENDPS_Vex(dest, src1, src2, mask, 4);
  }
  public void VBLENDPS_Vex256(SimdF32 dest, SimdF32 src1, SimdF32 src2, byte mask)
  {
    VBLENDPS_Vex(dest, src1, src2, mask, 8);
  }
intrinsics: |-
  __m128 _mm_blend_ps(__m128 v1, __m128 v2, const uint32_t mask)

  __m256 _mm256_blend_ps(__m256 a, __m256 b, const uint32_t mask)
exceptions:
  floating: None
  other: \exceptionVex{4}
