%YAML 1.2
---
title: Logical AND NOT
opcode:
  - opcode: VEX.LZ.0F38.W0 F2 /r
    mnemonic: ANDN \i{r32a}, \i{r32b}, \i{r/m32}
    encoding: VEX
    validity:
      16: invalid
      32: valid
      64: valid
    cpuid: BMI1
    description: ANDs the inverted form of \i{r/m32} with \i{r32b}.
      Stores the result in \i{r32a}.
  - opcode: VEX.LZ.0F38.W1 F2 /r
    mnemonic: ANDN \i{r64a}, \i{r64b}, \i{r/m64}
    encoding: VEX
    validity:
      16: invalid
      32: invalid
      64: valid
    cpuid: BMI1
    description: ANDs the inverted form of \i{r/m64} with \i{r64b}.
      Stores the result in \i{r64a}.
encoding:
  operands: 2
  encodings:
    VEX:
      - ModRM.reg[w]
      - VEX.vvvv[r]
      - ModRM.r/m[r]
description: >-
  The \c{ANDN} instruction performs a logical AND against the inverted form of the first source operand with the unchanged second source operand.
  The result is stored in in the destination operand.

  \canned{vexWIgnoredIn32}

  \canned{vexLMustBe0}
operation: |-
  public void ANDN_32(ref uint dest, uint src1, uint src2)
  {
    dest = ~src1 & src2;
  }

  public void ANDN_64(ref ulong dest, ulong src1, ulong src2)
  {
    dest = ~src1 & src2;
  }
flags:
  CF: Cleared.
  PF: Undefined.
  AF: Undefined.
  ZF: Set according to the result.
  SF: Set according to the result.
  OF: Cleared.
exceptions:
  floating: None
  other: \exceptionVex{13}
  otherAdditional:
    "#UD": \exception{vex.l}
changes:
  version: 75
  date: 2021-06
  list:
    - >-
      The \c{ANDN r64a, r64b, r/m64} form is documented as being "not encodable" in 32 bit mode.
      This is misleading as it \i{is} encodable, but is defined to be treated as the 32 bit form.
    - >-
      The \c{#UD} exception is not present in their exceptions list.
