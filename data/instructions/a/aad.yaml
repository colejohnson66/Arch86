%YAML 1.2
---
title: ASCII Adjust \reg{AX} Before Division
opcode:
  - opcode: D5 0A
    mnemonic: AAD
    encoding: ZO
    validity:
      16: valid
      32: valid
      64: invalid
    description: ASCII adjust \reg{AX} before division.
  - opcode: D5 \i{ib}
    mnemonic: AAD \i{imm8}
    encoding: I
    validity:
      16: valid
      32: valid
      64: invalid
    description: ASCII adjust \reg{AX} before division to number base \i{imm8}.
encoding:
  operands: 1
  encodings:
    ZO:
      - None (implicitly 10)
    I:
      - imm8[r]
description: >-
  The \c{AAD} instruction prepares a BCD number for division.

  This instruction will not be useful unless it is immediately followed by a \instr{DIV} instruction.
  Before executing either this instruction or the \instr{DIV} one, one should ensure that \reg{DX} is 0.

  Traditionally, this instruction is "ASCII Adjust Before Division".
  This would lead one to believe that it works on ASCII digits (\c{030h} (\c{0}) through \c{039h} (\c{9})), however this would be incorrect.
  This instruction \i{actually} operates on BCD digits (\c{00h} (\c{0}) through \c{09h} (\c{9})).

  This instruction implicitly operates on the \reg{AH} and \reg{AL} registers.

  Due to a quirk of history, this instruction encodes the base of the result in the instruction (the second byte).
  As such, it is possible to have this instruction work on other bases through an immediate 8 bit operand.
  Such methods are not guaranteed to be supported by your assembler, and in such situations, one must encode the instruction directly.

  \canned{no64,invalid}
operation: |-
  public void AAD(byte imm8)
  {
    AL = (AL + (AH * imm8)) & 0xFF;
    AH = 0;
  }
operationImage: /img/instruction/a/aad.png
operationNotes:
  - >-
    According to the source code for Bochs' (\c{/cpu/bcd.cc}), this instruction actually performs the operation on the \reg{AX} register, not \reg{AL}.
flags:
  CF: Undefined.
  PF: Set based on the resulting value in \reg{AL}.
  AF: Undefined.
  ZF: Set based on the resulting value in \reg{AL}.
  SF: Set based on the resulting value in \reg{AL}.
  OF: Undefined.
exceptions:
  protected:
    "#UD": \exception{lock}
  real: Same exceptions as protected mode.
  virtual: Same exceptions as protected mode.
  compatibility: Same exceptions as protected mode.
  long:
    "#UD": \exception{in64}
