%YAML 1.2
---
title: Logical AND
opcode:
  - opcode: 24 \i{ib}
    mnemonic: AND AL, \i{imm8}
    encoding: AI
    validity:
      16: valid
      32: valid
      64: valid
    description: ANDs \i{imm8} into \i{AL}.
  - opcode: 25 \i{iw}
    mnemonic: AND AX, \i{imm16}
    encoding: AI
    validity:
      16: valid
      32: valid
      64: valid
    description: ANDs \i{imm16} into \i{AX}.
  - opcode: 25 \i{id}
    mnemonic: AND EAX, \i{imm32}
    encoding: AI
    validity:
      16: valid
      32: valid
      64: valid
    description: ANDs \i{imm32} into \i{EAX}.
  - opcode: REX.W 25 \i{id}
    mnemonic: AND RAX, \i{imm32}
    encoding: AI
    validity:
      16: n/e
      32: n/e
      64: valid
    description: ANDs \i{imm32} (sign extended to 64 bits) into \i{RAX}.
  - opcode: 80 /r \i{ib}
    mnemonic: AND \i{r/m8}, \i{imm8}
    encoding: MI
    validity:
      16: valid
      32: valid
      64: valid
    description: ANDs \i{imm8} into \i{r/m8}.
  - opcode: REX 80 /r \i{ib}
    mnemonic: AND \i{r/m8*}, \i{imm8}
    encoding: MI
    validity:
      16: n/e
      32: n/e
      64: valid
    description: ANDs \i{imm8} into \i{r/m8}.
  - opcode: 81 /4 \i{iw}
    mnemonic: AND \i{r/m16}, \i{imm16}
    encoding: MI
    validity:
      16: valid
      32: valid
      64: valid
    description: ANDs \i{imm16} into \i{r/m16}.
  - opcode: 81 /4 \i{id}
    mnemonic: AND \i{r/m32}, \i{imm32}
    encoding: MI
    validity:
      16: valid
      32: valid
      64: valid
    description: ANDs \i{imm32} into \i{r/m32}.
  - opcode: REX.W 81 /r \i{id}
    mnemonic: AND \i{r/m64}, \i{imm32}
    encoding: MI
    validity:
      16: n/e
      32: n/e
      64: valid
    description: ANDs \i{imm32} (sign extended to 64 bits) into \i{r/m64}.
  - opcode: 82 /4 \i{ib}
    mnemonic: AND \i{r/m8}, \i{imm8}
    encoding: MI
    validity:
      16: valid
      32: valid
      64: invalid
    description: >-
      Undocumented alias for \c{80 /4 ib}.
      ANDs \i{imm8} (sign extended to 8 bits) into \i{r/m8}.
  - opcode: 83 /4 \i{ib}
    mnemonic: AND \i{r/m16}, \i{imm8}
    encoding: MI
    validity:
      16: valid
      32: valid
      64: valid
    description: ANDs \i{imm8} (sign extended to 16 bits) into \i{r/m16}.
  - opcode: 83 /4 \i{ib}
    mnemonic: AND \i{r/m32}, \i{imm8}
    encoding: MI
    validity:
      16: valid
      32: valid
      64: valid
    description: ANDs \i{imm8} (sign extended to 32 bits) into \i{r/m32}.
  - opcode: REX.W 83 /4 \i{ib}
    mnemonic: AND \i{r/m64}, \i{imm8}
    encoding: MI
    validity:
      16: n/e
      32: n/e
      64: valid
    description: ANDs \i{imm8} (sign extended to 64 bits) into \i{r/m64}.
  - opcode: 20 /r
    mnemonic: AND \i{r/m8}, \i{r8}
    encoding: MR
    validity:
      16: valid
      32: valid
      64: valid
    description: ANDs \i{r8} into \i{r/m8}.
  - opcode: REX 20 /r
    mnemonic: AND \i{r/m8*}, \i{r8}
    encoding: MR
    validity:
      16: n/e
      32: n/e
      64: valid
    description: ANDs \i{r8} into \i{r/m8}.
  - opcode: 21 /r
    mnemonic: AND \i{r/m16}, \i{r16}
    encoding: MR
    validity:
      16: valid
      32: valid
      64: valid
    description: ANDs \i{r16} into \i{r/m16}.
  - opcode: 21 /r
    mnemonic: AND \i{r/m32}, \i{r32}
    encoding: MR
    validity:
      16: valid
      32: valid
      64: valid
    description: ANDs \i{r32} into \i{r/m32}.
  - opcode: REX.W 21 /r
    mnemonic: AND \i{r/m64}, \i{r64}
    encoding: MR
    validity:
      16: n/e
      32: n/e
      64: valid
    description: ANDs \i{r64} into \i{r/m64}.
  - opcode: 22 /r
    mnemonic: AND \i{r8}, \i{r/m8}
    encoding: RM
    validity:
      16: valid
      32: valid
      64: valid
    description: ANDs \i{r/m8} into \i{r8}.
  - opcode: REX 22 /r
    mnemonic: AND \i{r8*}, \i{r/m8*}
    encoding: RM
    validity:
      16: n/e
      32: n/e
      64: valid
    description: ANDs \i{r/m8} into \i{r8}.
  - opcode: 23 /r
    mnemonic: AND \i{r16}, \i{r/m16}
    encoding: RM
    validity:
      16: valid
      32: valid
      64: valid
    description: ANDs \i{r/m16} into \i{r16}.
  - opcode: 23 /r
    mnemonic: AND \i{r32}, \i{r/m32}
    encoding: RM
    validity:
      16: valid
      32: valid
      64: valid
    description: ANDs \i{r/m32} into \i{r32}.
  - opcode: REX.W 23 /r
    mnemonic: AND \i{r64}, \i{r/m64}
    encoding: RM
    validity:
      16: n/e
      32: n/e
      64: valid
    description: ANDs \i{r/m64} into \i{r64}.
encoding:
  operands: 2
  encodings:
    AI:
      - AL/AX/EAX/RAX[rw]
      - imm8/16/32[r]
    MI:
      - ModRM.r/m[rw]
      - imm8/16/32[r]
    MR:
      - ModRM.r/m[rw]
      - ModRM.reg[r]
    RM:
      - ModRM.reg[rw]
      - ModRM.r/m[r]
description: >-
  The \c{AND} instruction performs a logical AND with the destination operand against the source operand and stores the result in the destination operand.
  The result is stored in in the destination operand.

  \canned{lockable}
operation: |-
  // `src` is sign extended to the width of `dest`

  public void AND_8(ref byte dest, byte src)
  {
    dest = dest & src;
  }

  public void AND_16(ref ushort dest, ushort src)
  {
    dest = dest & src;
  }

  public void AND_32(ref uint dest, uint src)
  {
    dest = dest & src;
  }

  public void AND_64(ref ulong dest, ulong src)
  {
    dest = dest & src;
  }
flags:
  CF: Cleared.
  PF: Set according to the result.
  AF: Undefined.
  ZF: Set according to the result.
  SF: Set according to the result.
  OF: Cleared.
exceptions:
  protected:
    "#GP(0)":
      - \exception{nonWritableSegment}
      - \exception{segLimit}
      - \exception{nullSelector}
    "#SS(0)": \exception{segLimitSS}
    "#PF(fc)": \exception{pf}
    "#AC(0)": \exception{ac}
    "#UD": \exception{lockNoMem}
  real:
    "#GP": \exception{segLimit}
    "#SS": \exception{segLimitSS}
    "#UD": \exception{lockNoMem}
  virtual:
    "#GP(0)": \exception{segLimit}
    "#SS(0)": \exception{segLimitSS}
    "#PF(fc)": \exception{pf}
    "#AC(0)": \exception{ac}
    "#UD": \exception{lockNoMem}
  compatibility: Same exceptions as in protected mode.
  long:
    "#SS(0)": \exception{nonCanonSS}
    "#GP(0)": \exception{nonCanon}
    "#PF(fc)": \exception{pf}
    "#AC(0)": \exception{ac}
    "#UD": \exception{lockNoMem}
changes:
  version: 75
  date: 2021-06
  list:
    - \c{REX 20 /r} is incorrectly described as "\i{r/m64} AND \i{r8} (\i{sign-extended})."
    - \c{REX 22 /r} is incorrectly described as "\i{r/m64} AND \i{r8} (\i{sign-extended})."
