%YAML 1.2
---
title: Perform Last Round of AES Encryption
opcode:
  - opcode: 66 0F 38 DD /r
    mnemonic: AESENCLAST \i{xmm1}, \i{xmm2/m128}
    encoding: LEGACY
    validity:
      16: invalid
      32: valid
      64: valid
    cpuid: AES
    description: >-
      Performs the last round of AES encryption using one 128 bit state from \i{xmm1} with one 128 bit round key from \i{xmm2/m128}.
      Stores the result in \i{xmm1}.
  - opcode: VEX.128.66.0F38.WIG DD /r
    mnemonic: VAESENCLAST \i{xmm1}, \i{xmm2}, \i{xmm2/m128}
    encoding: VEX
    validity:
      16: invalid
      32: valid
      64: valid
    cpuid: [AES, AVX]
    description: >-
      Performs the last round of AES encryption using one 128 bit state from \i{xmm2} with one 128 bit round key from \i{xmm3/m128}.
      Stores the result in \i{xmm1}.
  - opcode: VEX.256.66.0F38.WIG DD /r
    mnemonic: VAESENCLAST \i{ymm1}, \i{ymm2}, \i{ymm2/m256}
    encoding: VEX
    validity:
      16: invalid
      32: valid
      64: valid
    cpuid: VAES
    description: >-
      Performs the last round of AES encryption using two 128 bit states from \i{ymm2} with two 128 bit round keys from \i{ymm3/m256}.
      Stores the results in \i{ymm1}.
  - opcode: EVEX.128.66.0F38.WIG DD /r
    mnemonic: VAESENCLAST \i{xmm1}, \i{xmm2}, \i{xmm2/m128}
    encoding: EVEX
    validity:
      16: invalid
      32: valid
      64: valid
    cpuid: [VAES, AVX512VL]
    description: >-
      Performs the last round of AES encryption using one 128 bit state from \i{xmm2} with one 128 bit round key from \i{xmm3/m128}.
      Stores the result in \i{xmm1}.
  - opcode: EVEX.256.66.0F38.WIG DD /r
    mnemonic: VAESENCLAST \i{ymm1}, \i{ymm2}, \i{ymm2/m256}
    encoding: EVEX
    validity:
      16: invalid
      32: valid
      64: valid
    cpuid: [VAES, AVX512VL]
    description: >-
      Performs the last round of AES encryption using two 128 bit states from \i{ymm2} with two 128 bit round keys from \i{ymm3/m256}.
      Stores the results in \i{ymm1}.
  - opcode: EVEX.512.66.0F38.WIG DD /r
    mnemonic: VAESENCLAST \i{zmm1}, \i{zmm2}, \i{zmm2/m512}
    encoding: EVEX
    validity:
      16: invalid
      32: valid
      64: valid
    cpuid: [VAES, AVX512VL]
    description: >-
      Performs the last round of AES encryption using four 128 bit states from \i{zmm2} with four 128 bit round keys from \i{zmm3/m512}.
      Stores the results in \i{zmm1}.
encoding:
  operands: 3
  hasTuple: true
  encodings:
    LEGACY:
      - N/A
      - ModRM.reg[rw]
      - ModRM.r/m[r]
      - ""
    VEX:
      - N/A
      - ModRM.reg[w]
      - VEX.vvvv[r]
      - ModRM.r/m[r]
    EVEX:
      - Full
      - ModRM.reg[w]
      - EVEX.vvvv[r]
      - ModRM.r/m[r]
description: >-
  The \c{(V)AESENCLAST} instruction performs the last round of AES encryption using one, two, or four 128 bit states from the first source operand using 128 bit round keys from the second source operand.
  The result is stored in in the destination operand.

  Due to the nature of AES, this instruction must be used for the last encryption round.
  For all but the last, use the \instr{AESENC} instruction.
  Failure to do this correctly will result in an incorrect result after all the rounds.

  \canned{evexNoER}

  \canned{zeroUpperSimd}
operation: |-
  public void AESENCLAST(SimdU128 dest, SimdU128 src)
  {
    U128 state = dest[0];
    state = AesShiftRows(state);
    state = AesSubBytes(state);
    dest[0] = state ^ src[0];
    // dest[1..SimdU128.MAX] (unmodified)
  }

  void VAESENCLAST(SimdU128 dest, SimdU128 src1, SimdU128 src2, int kl)
  {
    for (int n = 0; n < kl, n++)
    {
      U128 state = src1[n];
      state = AesShiftRows(state);
      state = AesSubBytes(state);
      dest[n] = state ^ src2[n];
    }
    dest[kl..SimdU128.MAX] = 0;
  }
  public void VAESENC_Vex128(SimdU128 dest, SimdU128 src1, SimdU128 src2)
  {
    VAESENCLAST(dest, src1, src2, 1);
  }
  public void VAESENC_Vex256(SimdU128 dest, SimdU128 src1, SimdU128 src2)
  {
    VAESENCLAST(dest, src1, src2, 2);
  }

  public void VAESENC_Evex128(SimdU128 dest, SimdU128 src1, SimdU128 src2)
  {
    VAESENCLAST(dest, src1, src2, 1);
  }
  public void VAESENC_Evex256(SimdU128 dest, SimdU128 src1, SimdU128 src2)
  {
    VAESENCLAST(dest, src1, src2, 2);
  }
  public void VAESENC_Evex512(SimdU128 dest, SimdU128 src1, SimdU128 src2)
  {
    VAESENCLAST(dest, src1, src2, 4);
  }
intrinsics: |-
  __m128i _mm_aesenclast(__m128i state, __m128i key)

  __m256i _mm256_aesenclast_epi128(__m256i state, __m256i key)

  __m512i _mm512_aesenclast_epi128(__m512i state, __m512i key)
exceptions:
  floating: None
  other:
    - \exceptionVex{4}
    - \exceptionEvex{E4NF}
