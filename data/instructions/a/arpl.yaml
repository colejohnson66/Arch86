%YAML 1.2
---
title: Adjust \c{RPL} Field of Segment Selector
opcode:
  - opcode: 63 /r
    mnemonic: ARPL \i{r/m16}, \i{r16}
    encoding: MR
    validity:
      16: invalid
      32: valid
      64: n/e
    description: Adjusts the \c{RPL} field of \i{r/m16} to be greater than or equal to the \c{RPL} field of \i{r16}.
encoding:
  operands: 2
  encodings:
    MR:
      - ModRM.r/m[rw]
      - ModRM.reg[r]
description: >-
  The \c{ARPL} instruction compares the \c{RPL} (requested privilege level) field (bits 0 and 1) of two segment selectors.
  If the \c{RPL} field of the destination operand is less than the \c{RPL} field of the source operand, the \reg{ZF} flag is set and the \c{RPL} field of the destination is increased to match the source's.
  Otherwise, the \reg{ZF} flag is cleared and no change to the destination occurs.

  \canned{no16,invalid}

  \canned{no64,ne,MOVSXD}
operation: |-
  public void ARPL(ref ushort dest, ushort src)
  {
    // lowest two bits
    if (dest.Bit[0..2] < src.Bit[0..2])
    {
      dest.Bit[0..2] = src.Bit[0..2];
      ZF = 1;
    }
    else
    {
      ZF = 0;
    }
  }
flags:
  CF: Unmodified.
  PF: Unmodified.
  AF: Unmodified.
  ZF: Set if the destination operand is changed.
  SF: Unmodified.
  OF: Unmodified.
exceptions:
  real:
    "#UD": If in 16 bit mode.
  virtual:
    "#UD": If in 16 bit mode.
  protected:
    "#GP(0)":
      - \exception{nonWriteableSegment}
      - \exception{segLimit}
      - \exception{nullSelector}
    "#SS(0)": \exception{segLimitSS}
    "#PF(fc)": \exception{pf}
    "#AC(0)": \exception{ac}
    "#UD": \exception{lock}
  compatibility: Same exceptions as in protected mode.
  long: Not encodable.
