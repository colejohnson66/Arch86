%YAML 1.2
---
title: AES Round Key Generation Assist
opcode:
  - opcode: 66 0F 3A DF /r \i{ib}
    mnemonic: AESKEYGENASSIST \i{xmm1}, \i{xmm2/m128}, \i{imm8}
    encoding: RMI
    validity:
      16: invalid
      32: valid
      64: valid
    cpuid: AES
    description: >-
      Assist in AES round key generation using an 8 bit round constant (RCON) specified in the immediate byte and 128 bits of data specified in \i{xmm2/m128}.
      Stores the result in \i{xmm1}.
  - opcode: VEX.128.66.0F3A.WIG DF /r \i{ib}
    mnemonic: VAESKEYGENASSIST \i{xmm1}, \i{xmm2/m128}, \i{imm8}
    encoding: RMI
    validity:
      16: invalid
      32: valid
      64: valid
    cpuid: [AES, AVX]
    description: >-
      Assist in AES round key generation using an 8 bit round constant (RCON) specified in the immediate byte and 128 bits of data specified in \i{xmm2/m128}.
      Stores the result in \i{xmm1}.
encoding:
  operands: 3
  encodings:
    RMI:
      - ModRM.reg[w]
      - ModRM.r/m[r]
      - imm8
description: >-
  The \c{(V)AESKEYGENASSIST} instruction assists in expanding the AES cipher key using an 8 bit round constant (RCON) and 128 bits of data from the source operand.
  The result is stored in the destination operand.

  \canned{vvvvReserved,vex}

  \canned{zeroUpperSimd}
operation: |-
  public void AESKEYGENASSIST(SimdU32 dest, SimdU32 src, byte roundConstant)
  {
    uint x0 = src[0];
    uint x1 = src[1];
    uint x2 = src[2];
    uint x3 = src[3];
    uint rcon = roundConstant;

    dest[0] = SubWord(x1);
    dest[1] = RotWord(SubWord(x1)) ^ rcon;
    dest[2] = SubWord(x3);
    dest[3] = RotWord(SubWord(x3)) ^ rcon;
    // dest[4..SimdU32.MAX] (unmodified)
  }

  public void VAESKEYGENASSIST_Vex128(SimdU32 dest, SimdU32 src, byte roundConstant)
  {
    uint x0 = src[0];
    uint x1 = src[1];
    uint x2 = src[2];
    uint x3 = src[3];
    uint rcon = roundConstant;

    dest[0] = SubWord(x1);
    dest[1] = RotWord(SubWord(x1)) ^ rcon;
    dest[2] = SubWord(x3);
    dest[3] = RotWord(SubWord(x3)) ^ rcon;
    dest[4..SimdU32.MAX] = 0;
  }
intrinsics: |-
  __m128i _mm_aeskeygenassist(__m128i data, uint8_t roundConstant)
exceptions:
  floating: None
  other: \exceptionVex{4}
  otherAdditional:
    "#UD": \exception{vex.vvvv}
