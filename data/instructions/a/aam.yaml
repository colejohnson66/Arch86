%YAML 1.2
---
title: ASCII Adjust \reg{AX} After Multiplication
opcode:
  - opcode: D4 0A
    mnemonic: AAM
    encoding: ZO
    validity:
      16: valid
      32: valid
      64: invalid
    description: ASCII adjust \reg{AX} after multiply.
  - opcode: D4 \i{ib}
    mnemonic: AAM \i{imm8}
    encoding: I
    validity:
      16: valid
      32: valid
      64: invalid
    description: ASCII adjust \reg{AX} after multiply to number base \i{imm8}.
encoding:
  operands: 1
  encodings:
    ZO:
      - None (implicitly 10)
    I:
      - imm8[r]
description: >-
  The \c{AAM} instruction converts the result of a multiplication of two BCD digits to a valid 2-digit BCD number.

  This instruction will not be useful unless it immediately follows an \instr{MUL} instruction.

  Traditionally, this instruction is called "ASCII Adjust After Multiplication".
  This would lead one to believe that it works on ASCII digits (\c{030h} (\c{0}) through \c{039h} (\c{9})), however this would be incorrect.
  This instruction \i{actually} operates on BCD digits (\c{00h} (\c{0}) through \c{09h} (\c{9})).

  Due to a quirk of history, this instruction encodes the base of the result in the instruction (the second byte).
  As such, it is possible to have this instruction work on other bases through an immediate 8 bit operand.
  Such methods are not guaranteed to be supported by your assembler, and in such situations, one must encode the instruction directly.

  \canned{no64,invalid}
operation: |-
  public void AAM(byte imm8)
  {
    AH = AL / imm8;
    AL = AL & imm8;
  }
flags:
  CF: Undefined.
  PF: Set based on the resulting value in \reg{AL}.
  AF: Undefined.
  ZF: Set based on the resulting value in \reg{AL}.
  SF: Set based on the resulting value in \reg{AL}.
  OF: Undefined.
exceptions:
  protected:
    "#DE": If an immediate value of 0 is used.
    "#UD": \exception{lock}
  real: Same exceptions as protected mode.
  virtual: Same exceptions as protected mode.
  compatibility: Same exceptions as protected mode.
  long:
    "#UD": \exception{in64}
