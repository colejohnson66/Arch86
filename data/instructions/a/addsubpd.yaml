%YAML 1.2
---
title: Add/Subtract Packed Double-Precision Floating-Point Values
opcode:
  - opcode: 66 0F D0 /r
    mnemonic: ADDSUBPD \i{xmm1}, \i{xmm2/m128}
    encoding: LEGACY
    validity:
      16: invalid
      32: valid
      64: valid
    cpuid: SSE3
    description: >-
      Add/subtract packed double-precision floating point values from \i{xmm2/m128} and \i{xmm1}.
      Stores the result in \i{xmm1}.
  - opcode: VEX.128.66.0F.WIG D0 /r
    mnemonic: VADDSUBPD \i{xmm1}, \i{xmm2}, \i{xmm3/m128}
    encoding: VEX
    validity:
      16: invalid
      32: valid
      64: valid
    cpuid: AVX
    description: >-
      Add/subtract packed double-precision floating point values from \i{xmm3/m128} and \i{xmm2}.
      Stores the result in \i{xmm1}.
  - opcode: VEX.256.66.0F.WIG D0 /r
    mnemonic: VADDSUBPD \i{ymm1}, \i{ymm2}, \i{ymm3/m256}
    encoding: VEX
    validity:
      16: invalid
      32: valid
      64: valid
    cpuid: AVX
    description: >-
      Add/subtract packed double-precision floating point values from \i{ymm2/m256} and \i{ymm2}.
      Stores the result in \i{ymm1}.
encoding:
  operands: 3
  encodings:
    LEGACY:
      - ModRM.reg[rw]
      - ModRM.r/m[r]
      - ""
    VEX:
      - ModRM.reg[w]
      - VEX.vvvv[r]
      - ModRM.r/m[r]
description: >-
  The \c{(V)ADDSUBPD} instruction performs two operations:
  It subtracts the odd numbered double-precision floating-point values, and adds the even numbered ones.
  The result is stored in in the destination operand.

  \canned{zeroUpperSimd}
operation: |-
  public void ADDSUBPD(SimdF64 dest, SimdF64 src)
  {
    dest[0] -= src[0];
    dest[1] += src[1];
    // dest[2..SimdF64.MAX] (unmodified)
  }

  public void VADDSUBPD_Vex128(SimdF64 dest, SimdF64 src1, SimdF64 src2)
  {
    dest[0] -= src[0];
    dest[1] += src[1];
    dest[2..SimdF64.MAX] = 0;
  }
  public void VADDSUBPD_Vex256(SimdF64 dest, SimdF64 src1, SimdF64 src2)
  {
    dest[0] -= src[0];
    dest[1] += src[1];
    dest[2] -= src[2];
    dest[3] += src[3];
    dest[4..SimdF64.MAX] = 0;
  }
# Intel manual doesn't mention if V256 zeros upper bits; I assume it should
intrinsics: |-
  __m128d _mm_addsub_pd(__m128d a, __m128d b)

  __m256d _mm256_addsub_pd(__m256d a, __m256d b)
exceptions:
  floating: Overflow, Underflow, Invalid, Precision, Denormal
  other: \exceptionVex{2}
